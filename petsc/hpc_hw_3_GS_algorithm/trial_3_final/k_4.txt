1  0  0  0  
0  1  0  0  
0  0  1  0  
0  0  0  1  
****************************************************************************************************************************************************************
***                                WIDEN YOUR WINDOW TO 160 CHARACTERS.  Use 'enscript -r -fCourier9' to print this document                                 ***
****************************************************************************************************************************************************************

------------------------------------------------------------------ PETSc Performance Summary: ------------------------------------------------------------------



      ##########################################################
      #                                                        #
      #                       WARNING!!!                       #
      #                                                        #
      #   This code was compiled with a debugging option.      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


./gsa on a arch-linux-cxx-debug named Raziel_Uchiha with 1 processor, by raziel66612 Sun Nov 27 22:24:39 2022
Using Petsc Release Version 3.18.1, unknown 

                         Max       Max/Min     Avg       Total
Time (sec):           2.787e-02     1.000   2.787e-02
Objects:              6.000e+00     1.000   6.000e+00
Flops:                3.400e+06     1.000   3.400e+06  3.400e+06
Flops/sec:            1.220e+08     1.000   1.220e+08  1.220e+08
Memory (bytes):       1.672e+06     1.000   1.672e+06  1.672e+06
MPI Msg Count:        0.000e+00     0.000   0.000e+00  0.000e+00
MPI Msg Len (bytes):  0.000e+00     0.000   0.000e+00  0.000e+00
MPI Reductions:       0.000e+00     0.000

Flop counting convention: 1 flop = 1 real number operation of type (multiply/divide/add/subtract)
                            e.g., VecAXPY() for real vectors of length N --> 2N flops
                            and VecAXPY() for complex vectors of length N --> 8N flops

Summary of Stages:   ----- Time ------  ----- Flop ------  --- Messages ---  -- Message Lengths --  -- Reductions --
                        Avg     %Total     Avg     %Total    Count   %Total     Avg         %Total    Count   %Total
 0:      Main Stage: 2.7860e-02 100.0%  3.4000e+06 100.0%  0.000e+00   0.0%  0.000e+00        0.0%  0.000e+00   0.0%

------------------------------------------------------------------------------------------------------------------------
See the 'Profiling' chapter of the users' manual for details on interpreting output.
Phase summary info:
   Count: number of times phase was executed
   Time and Flop: Max - maximum over all processors
                  Ratio - ratio of maximum to minimum over all processors
   Mess: number of messages sent
   AvgLen: average message length (bytes)
   Reduct: number of global reductions
   Global: entire computation
   Stage: stages of a computation. Set stages with PetscLogStagePush() and PetscLogStagePop().
      %T - percent time in this phase         %F - percent flop in this phase
      %M - percent messages in this phase     %L - percent message lengths in this phase
      %R - percent reductions in this phase
   Total Mflop/s: 10e-6 * (sum of flop over all processors)/(max time over all processors)
------------------------------------------------------------------------------------------------------------------------


      ##########################################################
      #                                                        #
      #                       WARNING!!!                       #
      #                                                        #
      #   This code was compiled with a debugging option.      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


Event                Count      Time (sec)     Flop                              --- Global ---  --- Stage ----  Total
                   Max Ratio  Max     Ratio   Max  Ratio  Mess   AvgLen  Reduct  %T %F %M %L %R  %T %F %M %L %R Mflop/s
------------------------------------------------------------------------------------------------------------------------

--- Event Stage 0: Main Stage

VecDot                22 1.0 2.1158e-03 1.0 2.20e+06 1.0 0.0e+00 0.0e+00 0.0e+00  8 65  0  0  0   8 65  0  0  0  1040
VecNorm                4 1.0 3.3220e-04 1.0 4.00e+05 1.0 0.0e+00 0.0e+00 0.0e+00  1 12  0  0  0   1 12  0  0  0  1204
VecScale               4 1.0 2.7130e-04 1.0 2.00e+05 1.0 0.0e+00 0.0e+00 0.0e+00  1  6  0  0  0   1  6  0  0  0   737
VecAXPY                6 1.0 6.3680e-04 1.0 6.00e+05 1.0 0.0e+00 0.0e+00 0.0e+00  2 18  0  0  0   2 18  0  0  0   942
VecSetRandom           4 1.0 1.4003e-02 1.0 0.00e+00 0.0 0.0e+00 0.0e+00 0.0e+00 50  0  0  0  0  50  0  0  0  0     0
Gram_Schmidt_orthogonalization       1 1.0 1.8812e-03 1.0 1.80e+06 1.0 0.0e+00 0.0e+00 0.0e+00  7 53  0  0  0   7 53  0  0  0   957
------------------------------------------------------------------------------------------------------------------------

Object Type          Creations   Destructions. Reports information only for process 0.

--- Event Stage 0: Main Stage

         PetscRandom     1              1
              Vector     4              4
              Viewer     1              0
========================================================================================================================
Average time to get PetscTime(): 4e-08
#PETSc Option Table entries:
-k 4
-log_view
-n 50000
#End of PETSc Option Table entries
Compiled without FORTRAN kernels
Compiled with full precision matrices (default)
sizeof(short) 2 sizeof(int) 4 sizeof(long) 8 sizeof(void*) 8 sizeof(PetscScalar) 8 sizeof(PetscInt) 4
Configure options: --with-cc=gcc --with-fc=gfortran --with-cxx=g++ --with-clanguage=cxx --download-fblaslapack --download-mpich
-----------------------------------------
Libraries compiled on 2022-11-20 17:54:57 on Raziel_Uchiha 
Machine characteristics: Linux-5.10.16.3-microsoft-standard-WSL2-x86_64-with-glibc2.29
Using PETSc directory: /petsc
Using PETSc arch: arch-linux-cxx-debug
-----------------------------------------

Using C compiler: /petsc/arch-linux-cxx-debug/bin/mpicxx  -Wall -Wwrite-strings -Wno-strict-aliasing -Wno-unknown-pragmas -Wno-lto-type-mismatch -fstack-protector -fvisibility=hidden -g -O0  -std=gnu++17  
Using Fortran compiler: /petsc/arch-linux-cxx-debug/bin/mpif90  -Wall -ffree-line-length-none -ffree-line-length-0 -Wno-lto-type-mismatch -Wno-unused-dummy-argument -g -O0    
-----------------------------------------

Using include paths: -I/petsc/include -I/petsc/arch-linux-cxx-debug/include
-----------------------------------------

Using C linker: /petsc/arch-linux-cxx-debug/bin/mpicxx
Using Fortran linker: /petsc/arch-linux-cxx-debug/bin/mpif90
Using libraries: -Wl,-rpath,/petsc/arch-linux-cxx-debug/lib -L/petsc/arch-linux-cxx-debug/lib -lpetsc -Wl,-rpath,/petsc/arch-linux-cxx-debug/lib -L/petsc/arch-linux-cxx-debug/lib -Wl,-rpath,/usr/lib/gcc/x86_64-linux-gnu/9 -L/usr/lib/gcc/x86_64-linux-gnu/9 -lflapack -lfblas -lpthread -lm -lstdc++ -ldl -lmpifort -lmpi -lgfortran -lm -lgfortran -lm -lgcc_s -lquadmath -lstdc++ -ldl
-----------------------------------------



      ##########################################################
      #                                                        #
      #                       WARNING!!!                       #
      #                                                        #
      #   This code was compiled with a debugging option.      #
      #   To get timing results run ./configure                #
      #   using --with-debugging=no, the performance will      #
      #   be generally two or three times faster.              #
      #                                                        #
      ##########################################################


